public class Creature implements Drawable {
	
	LinkedList <Cell> cells;
	Cell head;
	
	Direction directionToMove;
	
	public Creature(LinkedList <Cell> cells) {
		
		this.cells=cells;
	}
	
	
	public Action chooseAction(LocalInformation createLocalInformationForCreature) {
		List <Direction> freeDirections=createLocalInformationForCreature.getFreeDirections();
		directionToMove =LocalInformation.getRandomDirection(freeDirections);
		return new Action(Action.Type.MOVE,directionToMove);
	}

	@Override
	public void draw(GridPanel panel) {
		for(Cell cell : cells) {
			if(cell.type==20 && cells.getFirst()==cell) {
				panel.drawSquare(cell.getX(), cell.getY(), Color.RED);
			}
			else  {
				panel.drawSquare(cell.getX(), cell.getY(), Color.BLUE);
			}
			
			
		}
		
	}
	
	
	//Head'in x ve y parametreleri g√∂nderiliyor
	public int getX() {
		return this.cells.getFirst().getX();
	}
	
	public int getY() {
		return this.cells.getFirst().getY();
	}
	
	
	public void setX(int x) {
		this.cells.getFirst().setX(x);
	}
	
	public void setY(int y) {
		 this.cells.getFirst().setY(y) ;
	}
	
	////////////////////
	
	public void move(Direction direction) {

		if(direction==Direction.UP) {
			this.cells.getFirst().setY( this.cells.getFirst().getY() - 1);
		}
		else if(direction==Direction.DOWN) {
			this.cells.getFirst().setY( this.cells.getFirst().getY() + 1);
		}
		else if(direction==Direction.RIGHT) {
			this.cells.getFirst().setX( this.cells.getFirst().getX() + 1);
		}
		else {
			this.cells.getFirst().setX( this.cells.getFirst().getX() - 1);
		}
	}
	
	

}
